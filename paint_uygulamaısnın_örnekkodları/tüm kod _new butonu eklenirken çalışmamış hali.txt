using System;
using System.Drawing;
using System.Windows.Forms;
using System.Collections.Generic;
using System.Security.Cryptography.X509Certificates;
using System.Security.Policy;

namespace SimplePaint
{
    public partial class Form1 : Form
    {
        private bool drawing;
        private int x, y;
        private Pen pen;
        private Graphics g;
        private string shape;
        private Bitmap bmp;
        private List<Shape> shapes = new List<Shape>();
        private Stack<Bitmap> undoStack = new Stack<Bitmap>();
        private Stack<Bitmap> redoStack = new Stack<Bitmap>();
        

        public Form1()
        {
            InitializeComponent();
            drawing = false;
            pen = new Pen(Color.Black, 2);
            cmbPenSize.SelectedIndex = 0; // Default olarak ilk öğeyi seç.
            cmbPenSize.SelectedIndexChanged += cmbPenSize_SelectedIndexChanged;
            cmbShape.SelectedIndex = 0; // Default olarak ilk öğeyi seç.
            cmbShape.SelectedIndexChanged += cmbShape_SelectedIndexChanged;
            shape = "Free Draw";

            // Bitmap nesnesini panelin boyutunda oluşturun ve Graphics nesnesini ayarlayın
            bmp = new Bitmap(panel1.Width, panel1.Height);
            panel1.BackgroundImage = bmp;
            panel1.Paint += panel1_Paint;

            btnAddText.Click += btnAddText_Click;
            textBox1.TextChanged += textBox1_TextChanged;
        }

        public abstract class Shape
        {
            public abstract void Draw(Graphics g);
        }

        public class RectangleShape : Shape
        {
            private int X, Y, Width, Height;
            private Color Color;
            private float Thickness;

            public RectangleShape(int x, int y, int width, int height, Color color, float thickness)
            {
                X = x;
                Y = y;
                Width = width;
                Height = height;
                Color = color;
                Thickness = thickness;
            }

            public override void Draw(Graphics g)
            {
                using (Pen pen = new Pen(Color, Thickness))
                {
                    g.DrawRectangle(pen, X, Y, Width, Height);
                }
            }
        }

        public class EllipseShape : Shape
        {
            private int X, Y, Width, Height;
            private Color Color;
            private float Thickness;

            public EllipseShape(int x, int y, int width, int height, Color color, float thickness)
            {
                X = x;
                Y = y;
                Width = width;
                Height = height;
                Color = color;
                Thickness = thickness;
            }

            public override void Draw(Graphics g)
            {
                using (Pen pen = new Pen(Color, Thickness))
                {
                    g.DrawEllipse(pen, X, Y, Width, Height);
                }
            }
        }

        private void panel1_MouseDown(object sender, MouseEventArgs e)
        {
            drawing = true;
            x = e.X;
            y = e.Y;
            undoStack.Push((Bitmap)bmp.Clone());
            redoStack.Clear();
        }

        private void panel1_MouseMove(object sender, MouseEventArgs e)
        {
            if (drawing && shape == "Free Draw")
            {
                using (Graphics g = Graphics.FromImage(bmp))
                {
                    g.DrawLine(pen, new Point(x, y), e.Location);
                }
                x = e.X;
                y = e.Y;
                panel1.Invalidate();
            }
        }

        private void panel1_MouseUp(object sender, MouseEventArgs e)
        {
            if (drawing)
            {
                using (Graphics g = Graphics.FromImage(bmp))
                {
                    if (shape == "Rectangle")
                    {
                        int width = Math.Abs(x - e.X);
                        int height = Math.Abs(y - e.Y);
                        int left = Math.Min(x, e.X);
                        int top = Math.Min(y, e.Y);
                        g.DrawRectangle(pen, left, top, width, height);
                    }
                    else if (shape == "Ellipse")
                    {
                        int width = Math.Abs(x - e.X);
                        int height = Math.Abs(y - e.Y);
                        int left = Math.Min(x, e.X);
                        int top = Math.Min(y, e.Y);
                        g.DrawEllipse(pen, left, top, width, height);
                    }
                }
                drawing = false;
                panel1.Invalidate();
            }
        }

        private void panel1_Paint(object sender, PaintEventArgs e)
        {
            // Metnin boyutunu 20 olarak ayarlayın
            Font font = new Font(this.Font.FontFamily, 20);

            // Metnin rengini seçilen renge ayarlayın
            Color textColor = pen.Color;
            e.Graphics.DrawImage(bmp, Point.Empty);
        }

        private void btnColor_Click(object sender, EventArgs e)
        {
            if (colorDialog.ShowDialog() == DialogResult.OK)
            {
                pen.Color = colorDialog.Color;
            }
        }

        private void btnEraser_Click(object sender, EventArgs e)
        {
            pen.Color = panel1.BackColor;
        }

        private void cmbPenSize_SelectedIndexChanged(object sender, EventArgs e)
        {
            int size;
            if (int.TryParse(cmbPenSize.SelectedItem.ToString(), out size))
            {
                pen.Width = size;
            }
        }

        private void cmbShape_SelectedIndexChanged(object sender, EventArgs e)
        {
            shape = cmbShape.SelectedItem.ToString();
        }

        private void toolStripMenuItem4_Click(object sender, EventArgs e)
        {
            using (SaveFileDialog saveFileDialog = new SaveFileDialog())
            {
                saveFileDialog.Filter = "Image Files (*.png, *.jpg, *.bmp)|*.png;*.jpg;*.bmp";
                if (saveFileDialog.ShowDialog() == DialogResult.OK)
                {
                    string fileName = saveFileDialog.FileName;
                    using (Bitmap bmp = new Bitmap(panel1.Width, panel1.Height))
                    {
                        panel1.DrawToBitmap(bmp, new Rectangle(0, 0, panel1.Width, panel1.Height));
                        bmp.Save(fileName);
                    }
                    
                }
            }
        }

        private void newToolStripMenuItem_Click_Click(object sender, EventArgs e)
        {
            if (shapes.Count > 0)
            {
                DialogResult result = MessageBox.Show(
                    "There are unsaved changes. Do you want to save your changes?",
                    "Warning",
                    MessageBoxButtons.YesNoCancel,
                    MessageBoxIcon.Warning
                );

                if (result == DialogResult.Yes)
                {
                    SaveChanges();
                    ClearPanel();
                }
                else if (result == DialogResult.No)
                {
                    ClearPanel();
                }
                // Do nothing if Cancel is clicked
            }
            else
            {
                ClearPanel();
            }
        }
        private void SaveChanges()
        {
            using (SaveFileDialog saveFileDialog = new SaveFileDialog())
            {
                saveFileDialog.Filter = "Image Files (*.png, *.jpg, *.bmp)|*.png;*.jpg;*.bmp";
                if (saveFileDialog.ShowDialog() == DialogResult.OK)
                {
                    string fileName = saveFileDialog.FileName;
                    using (Bitmap bmp = new Bitmap(panel1.Width, panel1.Height))
                    {
                        panel1.DrawToBitmap(bmp, new Rectangle(0, 0, panel1.Width, panel1.Height));
                        bmp.Save(fileName);
                    }
                }
            }
        }


        private void ClearPanel()
        {
            shapes.Clear();
            bmp = new Bitmap(panel1.Width, panel1.Height);
            g = Graphics.FromImage(bmp);
            panel1.Invalidate();
        }

        private void openToolStripMenuItem_Click_Click(object sender, EventArgs e)
        {
            OpenFileDialog openFileDialog = new OpenFileDialog();
            openFileDialog.Filter = "Image Files (*.bmp;*.jpg;*.jpeg;*.png)|*.bmp;*.jpg;*.jpeg;*.png|All Files (*.*)|*.*";
            openFileDialog.FilterIndex = 1;
            openFileDialog.RestoreDirectory = true;

            if (openFileDialog.ShowDialog() == DialogResult.OK)
            {
                try
                {
                    using (Image img = Image.FromFile(openFileDialog.FileName))
                    {
                        bmp = new Bitmap(img);
                        panel1.BackgroundImage = bmp;
                        panel1.Invalidate();
                    }
                }
                catch (Exception ex)
                {
                    MessageBox.Show("Error: Could not open file. Original error: " + ex.Message);
                }
            }
        }

        private void saveAsToolStripMenuItem_Click_Click(object sender, EventArgs e)
        {
            using (SaveFileDialog saveFileDialog = new SaveFileDialog())
            {
                saveFileDialog.Filter = "Image Files (.png, *.jpg, *.bmp)|.png;.jpg;.bmp";
                if (saveFileDialog.ShowDialog() == DialogResult.OK)
                {
                    string fileName = saveFileDialog.FileName;
                    using (Bitmap bmp = new Bitmap(panel1.Width, panel1.Height))
                    {
                        panel1.DrawToBitmap(bmp, new Rectangle(0, 0, panel1.Width, panel1.Height));
                        bmp.Save(fileName);
                    }
                }
            }
        }

        private void exitToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Application.Exit();
        }

        private void undoToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (undoStack.Count > 0)
            {
                redoStack.Push((Bitmap)bmp.Clone());
                bmp = undoStack.Pop();
                panel1.BackgroundImage = bmp;
                panel1.Invalidate();
            }
        }

        private void redoToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (redoStack.Count > 0)
            {
                undoStack.Push((Bitmap)bmp.Clone());
                bmp = redoStack.Pop();
                panel1.BackgroundImage = bmp;
                panel1.Invalidate();
            }
        }

        private void btnRed_Click(object sender, EventArgs e)
        {
            pen.Color = Color.Red;
        }

        private void btnGreen_Click(object sender, EventArgs e)
        {
            pen.Color = Color.Green;
        }

        private void btnBlue_Click(object sender, EventArgs e)
        {
            pen.Color = Color.Blue;
        }

        private void btnYellow_Click(object sender, EventArgs e)
        {
            pen.Color = Color.Yellow;
        }

        private void btnBlack_Click(object sender, EventArgs e)
        {
            pen.Color = Color.Black;
        }

        private void textBox1_TextChanged(object sender, EventArgs e)
        {

        }

        private void btnAddText_Click(object sender, EventArgs e)
        {
            string text = textBox1.Text;
            if (!string.IsNullOrEmpty(text))
            {
                // Kullanıcıdan metin eklemek için MouseDown ve MouseUp olaylarını kullanın
                panel1.MouseDown += Panel1_MouseDown_AddText;
                MessageBox.Show("Click on the panel where you want to add the text.");
            }
        }
        private void Panel1_MouseDown_AddText(object sender, MouseEventArgs e)
        {
            // Metni sadece bir kez yerleştirmek için MouseDown olayını kullanıyoruz
            string text = textBox1.Text;
            
                // Metni tıklanan konuma yerleştirin
                using (Graphics g = Graphics.FromImage(bmp))
                {
                    // Metni yerleştirme
                    g.DrawString(text, this.Font, new SolidBrush(pen.Color), e.Location);
                }
                panel1.MouseDown -= Panel1_MouseDown_AddText;
            panel1.Invalidate();
            
        }

        private void btnClear_Click(object sender, EventArgs e)
        {
            bmp = new Bitmap(panel1.Width, panel1.Height);
            panel1.BackgroundImage = bmp;
            panel1.Invalidate();
        }
    }
}
s